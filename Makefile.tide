# Any copyright is dedicated to the Public Domain.
# http://creativecommons.org/publicdomain/zero/1.0/

ROOT_DIR=${CURDIR}
LLVM_PROJ_DIR?=$(ROOT_DIR)/src/llvm-project

# Windows needs munging
ifeq ($(OS),Windows_NT)

PREFIX?=c:/wasi-sdk
# we need to explicitly call bash -c for makefile $(shell ...), otherwise we'll try under
# who knows what
BASH=bash -c

ifeq (x$(MSYSTEM),x)
$(error On Windows, this Makefile only works in MSYS2 environments such as git-bash.)
endif

# msys needs any /-prefixed arguments, or =/ containing, to turn into //
# because it tries to path-expand the / into the msys root.  // escapes this.
ESCAPE_SLASH=/

BUILD_PREFIX=$(PREFIX)

# assuming we're running under msys2 (git-bash), PATH needs /c/foo format directories (because
# it itself is :-delimited)
PATH_PREFIX=$(shell cygpath.exe -u $(BUILD_PREFIX))

else

WASI_SDK?=/opt/wasi-sdk
PREFIX?=/opt/wasi-sdk
DESTDIR=$(abspath build/install)
BUILD_PREFIX=$(DESTDIR)$(PREFIX)
PATH_PREFIX=$(BUILD_PREFIX)
ESCAPE_SLASH?=
BASH=

endif

# Only the major version is needed for Clang, see https://reviews.llvm.org/D125860.
CLANG_VERSION=$(shell $(BASH) ./llvm_version_major.sh $(LLVM_PROJ_DIR))
VERSION:=$(shell $(BASH) ./version.sh)
DEBUG_PREFIX_MAP=-fdebug-prefix-map=$(ROOT_DIR)=wasisdk://v$(VERSION)

default: build
	@echo "Use -fdebug-prefix-map=$(ROOT_DIR)=wasisdk://v$(VERSION)"

check:
	CC="clang --sysroot=$(BUILD_PREFIX)/share/wasi-sysroot" \
	CXX="clang++ --sysroot=$(BUILD_PREFIX)/share/wasi-sysroot" \
	PATH="$(PATH_PREFIX)/bin:$$PATH" tests/run.sh $(RUNTIME)

clean:
	rm -rf build $(DESTDIR)

# Flags for libcxx and libcxxabi.
LIBCXX_CMAKE_FLAGS = \
    -DCMAKE_SYSTEM_NAME=WASI \
    -DCMAKE_SYSTEM_VERSION=1 \
    -DCMAKE_SYSTEM_PROCESSOR=wasm32 \
    -DCMAKE_C_COMPILER=$(LLVM_PROJ_DIR)/build_osx/bin/clang \
    -DCMAKE_CXX_COMPILER=$(LLVM_PROJ_DIR)/build_osx/bin/clang++ \
    -DCMAKE_ASM_COMPILER=$(LLVM_PROJ_DIR)/build_osx/bin/clang \
    -DCMAKE_AR=$(LLVM_PROJ_DIR)/build_osx/bin/llvm-ar \
    -DCMAKE_RANLIB=$(LLVM_PROJ_DIR)/build_osx/bin/llvm-ranlib \
    -DCMAKE_C_COMPILER_TARGET=wasm32-wasi \
    -DCMAKE_CXX_COMPILER_TARGET=wasm32-wasi \
    -DCMAKE_ASM_COMPILER_TARGET=wasm32-wasi \
    -DCMAKE_C_COMPILER_WORKS=ON \
    -DCMAKE_CXX_COMPILER_WORKS=ON \
    -DCMAKE_MODULE_PATH=$(ROOT_DIR)/cmake \
    -DCMAKE_TOOLCHAIN_FILE=$(ROOT_DIR)/wasi-sdk-tide.cmake \
    -DLLVM_CONFIG_PATH=$(LLVM_PROJ_DIR)/build_osx/bin/llvm-config \
    -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
    -DCXX_SUPPORTS_CXX11=ON \
    -DLIBCXX_ENABLE_THREADS:BOOL=ON \
    -DLIBCXX_HAS_PTHREAD_API:BOOL=ON \
    -DLIBCXX_HAS_EXTERNAL_THREAD_API:BOOL=OFF \
    -DLIBCXX_BUILD_EXTERNAL_THREAD_LIBRARY:BOOL=OFF \
    -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=OFF \
    -DLLVM_COMPILER_CHECKED=ON \
    -DCMAKE_BUILD_TYPE=RelWithDebugInfo \
    -DLIBCXX_ENABLE_SHARED:BOOL=OFF \
    -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY:BOOL=OFF \
    -DLIBCXX_ENABLE_EXCEPTIONS:BOOL=OFF \
    -DLIBCXX_ENABLE_FILESYSTEM:BOOL=OFF \
    -DLIBCXX_CXX_ABI=libcxxabi \
    -DLIBCXX_CXX_ABI_INCLUDE_PATHS=$(LLVM_PROJ_DIR)/libcxxabi/include \
    -DLIBCXX_HAS_MUSL_LIBC:BOOL=ON \
    -DLIBCXX_ABI_VERSION=2 \
    -DLIBCXXABI_ENABLE_EXCEPTIONS:BOOL=ON \
    -DLIBCXXABI_ENABLE_SHARED:BOOL=OFF \
    -DLIBCXXABI_SILENT_TERMINATE:BOOL=ON \
    -DLIBCXXABI_ENABLE_THREADS:BOOL=ON \
    -DLIBCXXABI_HAS_PTHREAD_API:BOOL=ON \
    -DLIBCXXABI_HAS_EXTERNAL_THREAD_API:BOOL=OFF \
    -DLIBCXXABI_BUILD_EXTERNAL_THREAD_LIBRARY:BOOL=OFF \
    -DLIBCXXABI_HAS_WIN32_THREAD_API:BOOL=OFF \
    -DLIBCXXABI_ENABLE_PIC:BOOL=OFF \
    -DLIBUNWIND_ENABLE_SHARED:BOOL=OFF \
    -DLIBUNWIND_ENABLE_STATIC:BOOL=OFF \
    -DWASI_SDK_PREFIX=$(WASI_SDK) \
    -DUNIX:BOOL=ON \
    --debug-trycompile

build/libcxx-tide.BUILT:
	# Do the build.
	mkdir -p build/libcxx-threads
	cd build/libcxx-threads && cmake -G Ninja $(LIBCXX_CMAKE_FLAGS:@PTHREAD@=ON) \
		-DCMAKE_SYSROOT=$(SYSROOT) \
		-DCMAKE_AR=$(LLVM_PROJ_DIR)/build_osx/bin/llvm-ar \
		-DCMAKE_C_FLAGS="$(DEBUG_PREFIX_MAP) -pthread $(EXTRA_CFLAGS) -ftls-model=local-exec" \
		-DCMAKE_CXX_FLAGS="$(DEBUG_PREFIX_MAP) -pthread $(EXTRA_CXXFLAGS) -ftls-model=local-exec" \
		-DLIBCXX_LIBDIR_SUFFIX=$(ESCAPE_SLASH)/wasm32-wasi \
		-DLIBCXXABI_LIBDIR_SUFFIX=$(ESCAPE_SLASH)/wasm32-wasi \
		-DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi" \
		$(LLVM_PROJ_DIR)/runtimes
	ninja $(NINJA_FLAGS) -C build/libcxx-threads
	# Do the install.
	DESTDIR=$(DESTDIR) ninja $(NINJA_FLAGS) -C build/libcxx-threads install
	touch build/libcxx-tide.BUILT

build/config.BUILT:
	mkdir -p $(BUILD_PREFIX)/share/misc
	cp src/config/config.sub src/config/config.guess $(BUILD_PREFIX)/share/misc
	mkdir -p $(BUILD_PREFIX)/share/cmake
	cp wasi-sdk.cmake $(BUILD_PREFIX)/share/cmake
	cp wasi-sdk-pthread.cmake $(BUILD_PREFIX)/share/cmake
	touch build/config.BUILT

build: build/libcxx.BUILT build/config.BUILT

tidebuild: build/libcxx-tide.BUILT

strip: build/llvm.BUILT
	./strip_symbols.sh $(BUILD_PREFIX)/bin

package: build/package.BUILT

build/package.BUILT: build strip
	mkdir -p dist
	./deb_from_installation.sh $(shell pwd)/dist "$(VERSION)" "$(BUILD_PREFIX)"
	./tar_from_installation.sh "$(shell pwd)/dist" "$(VERSION)" "$(BUILD_PREFIX)"
	touch build/package.BUILT

.PHONY: default clean build tidebuild strip package check
